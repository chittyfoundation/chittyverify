version: '3.8'

services:
  # ChittyChain Evidence Ledger Main Service
  chittychain:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chittychain-evidence-ledger
    restart: unless-stopped
    ports:
      - "3000:3000"  # Main API
      - "3001:3001"  # MCP Server
      - "8080:8080"  # Health/Metrics
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      NEON_DATABASE_URL: ${NEON_DATABASE_URL}
      PORT: 3000
      MCP_PORT: 3001
      API_PORT: 8080
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: info
      ENABLE_METRICS: "true"
      ENABLE_TRACING: "true"
    volumes:
      - chittychain-data:/app/data
      - chittychain-logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - chittychain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database (for local development/testing)
  postgres:
    image: postgres:15-alpine
    container_name: chittychain-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: chittychain
      POSTGRES_USER: chittychain
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-chittychain123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/evidence-ledger-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./database/schema-validation.sql:/docker-entrypoint-initdb.d/02-validation.sql:ro
    ports:
      - "5432:5432"
    networks:
      - chittychain-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chittychain"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: chittychain-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - chittychain-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: chittychain-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - chittychain
    networks:
      - chittychain-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: chittychain-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    networks:
      - chittychain-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: chittychain-grafana
    restart: unless-stopped
    ports:
      - "3030:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deploy/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deploy/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - chittychain-network

volumes:
  chittychain-data:
    driver: local
  chittychain-logs:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  chittychain-network:
    driver: bridge