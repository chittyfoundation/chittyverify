import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { 
  Shield, 
  Zap, 
  FileText, 
  CheckCircle2, 
  Sparkles,
  TrendingUp,
  Lock,
  Eye,
  RefreshCw,
  User,
  AlertTriangle
} from 'lucide-react';
import { useMutation, useQueryClient } from '@tanstack/react-query';

interface AutoGeneratedFields {
  title: string;
  description: string;
  evidenceType: string;
  subtype: string;
  trustScore: number;
  sourceWeight: number;
  expectedVerificationTime: string;
}

const evidenceTypes = [
  { value: 'Financial Record', subtypes: ['Bank Statement', 'Tax Return', 'Invoice', 'Receipt', 'Credit Report'] },
  { value: 'Legal Document', subtypes: ['Contract', 'Deed', 'Will', 'Court Filing', 'Affidavit'] },
  { value: 'Government Document', subtypes: ['ID Card', 'Passport', 'Birth Certificate', 'Property Record', 'License'] },
  { value: 'Communication', subtypes: ['Email', 'Text Message', 'Letter', 'Memo', 'Notice'] },
  { value: 'Medical Record', subtypes: ['Medical Report', 'Lab Results', 'Prescription', 'Insurance Claim'] }
];

export function OneClickAuthentication() {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [autoFields, setAutoFields] = useState<AutoGeneratedFields | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [selectedType, setSelectedType] = useState('');
  const [selectedSubtype, setSelectedSubtype] = useState('');
  const [chittyId, setChittyId] = useState('');
  const [sourceVerified, setSourceVerified] = useState(false);
  const [isVerifyingSource, setIsVerifyingSource] = useState(false);
  const queryClient = useQueryClient();

  const verifyChittyId = async (id: string) => {
    setIsVerifyingSource(true);
    try {
      // Simulate ChittyID verification with backend call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Mock verification - in real system this would check against ChittyTrust registry
      if (id.length >= 8 && id.match(/^[A-Z0-9]+$/)) {
        setSourceVerified(true);
        return true;
      } else {
        setSourceVerified(false);
        return false;
      }
    } finally {
      setIsVerifyingSource(false);
    }
  };

  const analyzeFile = async (file: File): Promise<AutoGeneratedFields> => {
    if (!sourceVerified) {
      throw new Error('Source verification required before file analysis');
    }
    
    // Simulate AI analysis with realistic delays
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Generate contextual fields based on file name and type
    const fileName = file.name.toLowerCase();
    const fileSize = (file.size / 1024 / 1024).toFixed(2);
    
    let evidenceType = 'Financial Record';
    let subtype = 'Bank Statement';
    let trustScore = 0.75;
    let title = `Financial Document - ${file.name}`;
    let description = `Financial record analyzed from ${file.name} (${fileSize} MB)`;
    
    // Smart detection based on filename patterns
    if (fileName.includes('bank') || fileName.includes('statement')) {
      evidenceType = 'Financial Record';
      subtype = 'Bank Statement';
      trustScore = 0.85;
      title = `Bank Statement Analysis - ${file.name}`;
      description = `Bank statement document with transaction history and account details. File size: ${fileSize} MB. Auto-detected from filename patterns and document structure.`;
    } else if (fileName.includes('tax') || fileName.includes('1040')) {
      evidenceType = 'Financial Record';
      subtype = 'Tax Return';
      trustScore = 0.95;
      title = `Tax Return Document - ${file.name}`;
      description = `Official tax return document with income and deduction information. Government-level authenticity expected.`;
    } else if (fileName.includes('contract') || fileName.includes('agreement')) {
      evidenceType = 'Legal Document';
      subtype = 'Contract';
      trustScore = 0.80;
      title = `Legal Contract - ${file.name}`;
      description = `Legal agreement document with binding terms and conditions. Requires signature verification.`;
    } else if (fileName.includes('deed') || fileName.includes('property')) {
      evidenceType = 'Government Document';
      subtype = 'Property Record';
      trustScore = 0.92;
      title = `Property Document - ${file.name}`;
      description = `Government-issued property documentation. High trust score due to official source verification.`;
    }
    
    const sourceWeight = trustScore * 100;
    const verificationMinutes = Math.ceil(20 / trustScore);
    
    return {
      title,
      description,
      evidenceType,
      subtype,
      trustScore,
      sourceWeight,
      expectedVerificationTime: `~${verificationMinutes} minutes`
    };
  };

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setSelectedFile(file);
    setIsAnalyzing(true);
    
    try {
      const analysis = await analyzeFile(file);
      setAutoFields(analysis);
      setSelectedType(analysis.evidenceType);
      setSelectedSubtype(analysis.subtype);
    } catch (error) {
      console.error('Analysis failed:', error);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const regenerateFields = async () => {
    if (!selectedFile) return;
    setIsAnalyzing(true);
    
    try {
      const analysis = await analyzeFile(selectedFile);
      setAutoFields(analysis);
    } catch (error) {
      console.error('Regeneration failed:', error);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const authenticateMutation = useMutation({
    mutationFn: async () => {
      if (!selectedFile || !autoFields) throw new Error('No file or analysis data');
      
      // Create evidence with auto-generated fields
      const formData = new FormData();
      formData.append('file', selectedFile);
      formData.append('title', autoFields.title);
      formData.append('description', autoFields.description);
      formData.append('evidenceType', autoFields.evidenceType);
      formData.append('subtype', autoFields.subtype);
      formData.append('caseId', 'case-1');
      formData.append('evidenceTier', getTierFromTrustScore(autoFields.trustScore));
      
      const response = await fetch('/api/evidence/upload', {
        method: 'POST',
        body: formData
      });
      
      if (!response.ok) throw new Error('Upload failed');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/cases'] });
      setSelectedFile(null);
      setAutoFields(null);
    }
  });

  const getTierFromTrustScore = (score: number): string => {
    if (score >= 0.9) return 'GOVERNMENT';
    if (score >= 0.8) return 'FINANCIAL_INSTITUTION';
    if (score >= 0.7) return 'LEGAL_PROFESSIONAL';
    return 'INDIVIDUAL';
  };

  const getTrustColor = (score: number): string => {
    if (score >= 0.9) return 'text-green-400';
    if (score >= 0.8) return 'text-blue-400';
    if (score >= 0.7) return 'text-yellow-400';
    return 'text-orange-400';
  };

  return (
    <Card className="w-full bg-gradient-to-br from-slate-900 to-slate-800 text-white border-slate-700">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Zap className="h-5 w-5 text-green-400" />
          <span className="text-green-400">One-Click Authentication</span>
        </CardTitle>
        <p className="text-slate-300 text-sm">
          Simplified UI for quick verification and trust scoring
        </p>
      </CardHeader>
      <CardContent className="space-y-6">
        
        {/* ChittyID Authentication */}
        {!sourceVerified && (
          <div className="bg-slate-800/50 rounded-lg p-6 border border-slate-600">
            <div className="flex items-center gap-2 mb-4">
              <User className="h-5 w-5 text-blue-400" />
              <h3 className="text-lg font-medium text-white">Source Authentication Required</h3>
            </div>
            <p className="text-slate-400 mb-4">
              Enter your ChittyID to verify your identity and establish source authenticity before uploading evidence.
            </p>
            <div className="flex gap-3">
              <Input
                placeholder="Enter ChittyID (e.g. CT2025ABCD)"
                value={chittyId}
                onChange={(e) => setChittyId(e.target.value.toUpperCase())}
                className="bg-slate-700 border-slate-600 text-white flex-1"
                data-testid="input-chitty-id"
              />
              <Button
                onClick={() => verifyChittyId(chittyId)}
                disabled={!chittyId || isVerifyingSource}
                className="bg-blue-600 hover:bg-blue-700"
                data-testid="button-verify-source"
              >
                {isVerifyingSource ? (
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                ) : (
                  'Verify'
                )}
              </Button>
            </div>
          </div>
        )}

        {/* Source Verified Banner */}
        {sourceVerified && (
          <div className="bg-green-900/30 border border-green-700 rounded-lg p-4 mb-6">
            <div className="flex items-center gap-2">
              <CheckCircle2 className="h-5 w-5 text-green-400" />
              <span className="text-green-300 font-medium">Source Authenticated</span>
              <Badge className="bg-green-800 text-green-200 border-green-600">
                ChittyID: {chittyId}
              </Badge>
            </div>
            <p className="text-green-400 text-sm mt-1">
              Identity verified. You may now upload evidence for authentication.
            </p>
          </div>
        )}

        {/* File Upload */}
        {sourceVerified && !selectedFile && (
          <div className="border-2 border-dashed border-slate-600 rounded-lg p-8 text-center hover:border-green-400 transition-colors">
            <FileText className="h-12 w-12 text-slate-400 mx-auto mb-4" />
            <p className="text-slate-300 mb-4">Drop your legal document here</p>
            <Input
              type="file"
              onChange={handleFileUpload}
              className="hidden"
              id="one-click-upload"
              accept=".pdf,.docx,.png,.jpg,.jpeg,.txt"
              data-testid="input-file-upload"
            />
            <Button 
              onClick={() => document.getElementById('one-click-upload')?.click()}
              className="bg-green-600 hover:bg-green-700"
              data-testid="button-select-file"
            >
              Select Document
            </Button>
          </div>
        )}

        {/* Analysis in Progress */}
        {selectedFile && isAnalyzing && (
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-400 mx-auto mb-4"></div>
            <h3 className="text-lg font-medium text-white mb-2">Authenticating Evidence</h3>
            <p className="text-slate-400">
              Verifying {selectedFile.name} against source identity {chittyId}...
            </p>
            <div className="mt-4 text-xs text-slate-500">
              • Checking file integrity and authenticity
              • Validating source ownership
              • Generating cryptographic proof
            </div>
          </div>
        )}

        {/* Auto-Generated Fields */}
        {selectedFile && autoFields && !isAnalyzing && (
          <div className="space-y-6">
            {/* File Info */}
            <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-600">
              <div className="flex items-center justify-between mb-2">
                <h4 className="font-medium text-white">{selectedFile.name}</h4>
                <Badge className={`${getTrustColor(autoFields.trustScore)} border-current`}>
                  Trust Score: {(autoFields.trustScore * 100).toFixed(0)}%
                </Badge>
              </div>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="text-slate-400">Size:</span>
                  <span className="text-white ml-2">
                    {(selectedFile.size / 1024 / 1024).toFixed(2)} MB
                  </span>
                </div>
                <div>
                  <span className="text-slate-400">Verification Time:</span>
                  <span className="text-green-400 ml-2">
                    {autoFields.expectedVerificationTime}
                  </span>
                </div>
              </div>
            </div>

            {/* Auto-Generated Title */}
            <div>
              <div className="flex items-center justify-between mb-2">
                <Label className="text-slate-300">Title</Label>
                <div className="flex items-center gap-1 text-xs text-green-400">
                  <Sparkles className="h-3 w-3" />
                  Auto-generated
                </div>
              </div>
              <Input
                value={autoFields.title}
                onChange={(e) => setAutoFields({...autoFields, title: e.target.value})}
                className="bg-slate-800 border-slate-600 text-white"
                data-testid="input-title"
              />
            </div>

            {/* Auto-Generated Description */}
            <div>
              <div className="flex items-center justify-between mb-2">
                <Label className="text-slate-300">Description</Label>
                <div className="flex items-center gap-1 text-xs text-green-400">
                  <Sparkles className="h-3 w-3" />
                  Auto-generated
                </div>
              </div>
              <textarea
                value={autoFields.description}
                onChange={(e) => setAutoFields({...autoFields, description: e.target.value})}
                className="w-full p-3 bg-slate-800 border border-slate-600 rounded-md text-white text-sm resize-none"
                rows={3}
                data-testid="textarea-description"
              />
            </div>

            {/* Evidence Type & Subtype */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label className="text-slate-300">Evidence Type</Label>
                <Select value={selectedType} onValueChange={setSelectedType}>
                  <SelectTrigger className="bg-slate-800 border-slate-600 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {evidenceTypes.map((type) => (
                      <SelectItem key={type.value} value={type.value}>
                        {type.value}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label className="text-slate-300">Subtype</Label>
                <Select value={selectedSubtype} onValueChange={setSelectedSubtype}>
                  <SelectTrigger className="bg-slate-800 border-slate-600 text-white">
                    <SelectValue placeholder="Select subtype (optional)" />
                  </SelectTrigger>
                  <SelectContent>
                    {evidenceTypes
                      .find(type => type.value === selectedType)
                      ?.subtypes.map((subtype) => (
                        <SelectItem key={subtype} value={subtype}>
                          {subtype}
                        </SelectItem>
                      ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Trust Metrics */}
            <div className="bg-slate-800/30 rounded-lg p-4 border border-slate-600">
              <div className="flex items-center gap-2 mb-3">
                <TrendingUp className="h-4 w-4 text-green-400" />
                <span className="text-sm font-medium text-green-400">Trust & Authentication</span>
              </div>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div className="flex justify-between">
                  <span className="text-slate-400">Source Verified:</span>
                  <span className="text-green-400">✓ {chittyId}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-400">Trust Score:</span>
                  <span className={getTrustColor(autoFields.trustScore)}>
                    {(autoFields.trustScore * 100).toFixed(0)}%
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-400">Source Weight:</span>
                  <span className="text-white">{autoFields.sourceWeight.toFixed(0)}%</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-400">Tier Classification:</span>
                  <span className={getTrustColor(autoFields.trustScore)}>
                    {getTierFromTrustScore(autoFields.trustScore)}
                  </span>
                </div>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="flex gap-3">
              <Button
                onClick={regenerateFields}
                variant="outline"
                className="border-slate-600 text-slate-300 hover:bg-slate-700"
                disabled={isAnalyzing}
                data-testid="button-regenerate"
              >
                <RefreshCw className="h-4 w-4 mr-2" />
                Regenerate
              </Button>
              
              <Button
                onClick={() => authenticateMutation.mutate()}
                disabled={authenticateMutation.isPending}
                className="flex-1 bg-green-600 hover:bg-green-700"
                data-testid="button-authenticate"
              >
                {authenticateMutation.isPending ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Authenticating...
                  </>
                ) : (
                  <>
                    <Shield className="h-4 w-4 mr-2" />
                    One-Click Authenticate
                  </>
                )}
              </Button>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

export default OneClickAuthentication;